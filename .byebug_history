c
Shipment.find_by(id: params[:id])
Order.find_by(track_id: params[:query]).present?
c
Shipment.find(params[:id])
params[:id]
params[:id] = 0
params[:id] == "id"
c
params[:id]
params[:id].class
c
params[:id].class
params[:id].string?
params
params[:id].present?
c
@shipment.nil?
@shipment
@shipment = Order.find_by(track_id: params[:query]).present? ? Order.find_by(track_id: params[:query]).shipment : Shipment.find(params[:id])
Order.find_by(track_id: params[:query]).present?
c
Order.find_by(track_id: params[:query]).present?
Order.find_by(track_id: params[:query])
params[:query].present?
c
LineItem.find_by(id: @item).present?
LineItem.where(id: @item).present?
LineItem.where(id: @item)
LineItem.find(@item).exists?
LineItem.find(@item).present?
LineItem.find(@item)
c
params
c
params
c
obj.tracking_orders.where(status: key)
obj
obj.tracking_orders.where(status: key).present?
c
key == 'ordered'
obj.tracking_orders.where(status: key).present?
obj.tracking_orders.where(status: key).present
obj.tracking_orders.where(status: key).last.place
obj
key
c
params[:value]
params
c
key == 'ordered'
obj.tracking_orders.where(status: key).present?
c
obj.tracking_orders.where(status: key).last.place
obj.tracking_orders.where(status: key)
obj.tracking_orders.where(status: key).present?
c
obj.tracking_orders.where(status: key).present?
obj.tracking_orders
obj
key
c
params[:id].present?
params
c
params
c
obj.tracking_orders.where(status: key).present?
obj.tracking_orders.where(status: key)
obj.tracking_orders
obj
c
@shipment
@shipment.tracking_orders.create(status: @shipment.status, place: params[:tracking_order][:place])
@shipment = Shipment.find(params[:tracking_order][:shipment_id])
@shipment.tracking_orders.create(status: @shipment.status, place: params[:tracking_order][:place])
params
c
redirect_to tracking_order(@track.id)
@track
@track = @shipment.tracking_orders.create(status: @shipment.status, place: params[:tracking_order][:place])
@shipment = Shipment.find(params[:tracking_order][:shipment_id])
c
redirect_to tracking_order(@track)
@track = @shipment.tracking_orders.create(status: @shipment.status, place: params[:tracking_order][:place])
@shipment = Shipment.find(params[:tracking_order][:shipment_id])
params
c
@shipment = Shipment.find(params[:id])
params
c
params[:tracking_order][:shipment_id]
params[:shipment_id]
c
params
c
params
c
params[:shipment_id]
params
c
@shipment = Shipment.find(params[:id])
params
c
params[:id]
params
c
params[:id]
params
c
params[:product][:images].present?
params[:product][:images]
params[:product]
params
c
product_params.except("images")
product_params
c
params[:id]
params
c
@shipment
@shipment.status_changed?
c
self.status_changed?
self.status
c
self
c
self.tracking_orders.create
self.shimpents
self.shimpent_url
self.shimpent
self.Shimpent
self.value
self.first
self
self.status
self
c
self.build_shipment(status: "ordered", expected_delivery: DateTime.current.to_date+ 7.days).save
self.build_shipment(status: "ordered", expected_delivery: DateTime.current.to_date+ 7.days)
self.build_shipment.save
self.build_shipment
self.create_shipment
self.shipment
self
c
self.tracking_orders.create(status: self.status, place:city)
TrackingOrder.create(status: self.status, place: city).errors
TrackingOrder.create(status: self.status, place: city)
TrackingOrder.all
self.tracking_orders
self.tracking_orders = TrackingOrder.create(status: self.status, place: city)
city
self
TrackingOrder.create
city = User.where(role: "admin").first.addresses.first.city
self.status
c
params[:order][:product_ids].to_i
params[:order][:product_ids] << (params[:order][:product_ids].to_i)
params[:order][:product_ids] << params[:order][:product_ids].to_i
c
params[:order][:product_ids].present?
params[:order][:product_ids]
order_params
product_ids
c
product_ids < 1
product_ids << 1
product_ids
product.ids
@order.product_ids
product_ids
params.require(:order).permit(:address_id, :payment_method, product_ids:[])
product_ids = params[:order][:product_ids].to_i
params[:order][:product_ids].to_i
params[:order][:product_ids].present?
c
@order
params
b = Array.new
b = []
a._to_a
a
a = params[:order][:product_ids].to_i
params[:order][:product_ids].to_i.to_a
params[:order][:product_ids].to_a
params[:order][:product_ids].to_i
params[:order][:product_ids].present?
params[:order][:product_ids].class
params[:order][:product_ids]
params[:product_ids]
params[:order][:product_id]
params[:product_id]
params
@order
c
product_params
params
@product.build(product_params).errors
@product.update(product_params).errors
	@product.update(product_params)
product_params
@product = Product.find(params[:id])
params
c
self.build_shipment(status: "ordered", expected_delivery: "#{DateTime.current.to_date + 7.days}").save
self.build_shipment
self
c
@order.valid?
c
self.build_shipment(status: "ordered", expected_delivery: "#{DateTime.current.to_date + 7.days}").save
self.build_shipment(status: "ordered", expected_delivery: "#{DateTime.current.to_date + 7.days}")
self.create_shipment(status: "ordered", expected_delivery: "#{DateTime.current.to_date + 7.days}")
self.create_shipment(status: "ordered", expected_delivery:"#{DateTime.current.to_date + 7.days}")
self.create_shipment(status: "ordered", expected_delivery: DateTime.current.to_date + 7.days)
c
self.shipment = Shipment.create(status: "ordered", expected_delivery: DateTime.current.to_date + 7.days)
Shipment.create(status: "ordered", expected_delivery: DateTime.current.to_date + 7.days)
self.shipment
c
@order.errors.messages
@order.save
@order
c
@order = Order.find(params[:id])
Order.find(params[:id])
params
c
params[:status]
params[:id]
params
c
params[:address][:house_no]
params[:house_no]
params[:order_id].present?
params
c
@param = params[:id]
params
c
params
c
params
c
@params
@param
c
params[:id]
params
c
@item = params[:id]
